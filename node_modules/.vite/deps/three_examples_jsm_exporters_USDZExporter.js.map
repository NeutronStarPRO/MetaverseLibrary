{
  "version": 3,
  "sources": ["../../three/examples/jsm/exporters/USDZExporter.js"],
  "sourcesContent": ["import * as fflate from '../libs/fflate.module.js';\n\nclass USDZExporter {\n\n\tasync parse( scene ) {\n\n\t\tconst files = {};\n\t\tconst modelFileName = 'model.usda';\n\n\t\t// model file should be first in USDZ archive so we init it here\n\t\tfiles[ modelFileName ] = null;\n\n\t\tlet output = buildHeader();\n\n\t\tconst materials = {};\n\t\tconst textures = {};\n\n\t\tscene.traverseVisible( ( object ) => {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( object.material.isMeshStandardMaterial ) {\n\n\t\t\t\t\tconst geometry = object.geometry;\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tconst geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n\n\t\t\t\t\tif ( ! ( geometryFileName in files ) ) {\n\n\t\t\t\t\t\tconst meshObject = buildMeshObject( geometry );\n\t\t\t\t\t\tfiles[ geometryFileName ] = buildUSDFileAsString( meshObject );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! ( material.uuid in materials ) ) {\n\n\t\t\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutput += buildXform( object, geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.USDZExporter: Unsupported material type (USDZ only supports MeshStandardMaterial)', object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\toutput += buildMaterials( materials, textures );\n\n\t\tfiles[ modelFileName ] = fflate.strToU8( output );\n\t\toutput = null;\n\n\t\tfor ( const id in textures ) {\n\n\t\t\tconst texture = textures[ id ];\n\t\t\tconst color = id.split( '_' )[ 1 ];\n\t\t\tconst isRGBA = texture.format === 1023;\n\n\t\t\tconst canvas = imageToCanvas( texture.image, color );\n\t\t\tconst blob = await new Promise( resolve => canvas.toBlob( resolve, isRGBA ? 'image/png' : 'image/jpeg', 1 ) );\n\n\t\t\tfiles[ `textures/Texture_${ id }.${ isRGBA ? 'png' : 'jpg' }` ] = new Uint8Array( await blob.arrayBuffer() );\n\n\t\t}\n\n\t\t// 64 byte alignment\n\t\t// https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\t\tlet offset = 0;\n\n\t\tfor ( const filename in files ) {\n\n\t\t\tconst file = files[ filename ];\n\t\t\tconst headerSize = 34 + filename.length;\n\n\t\t\toffset += headerSize;\n\n\t\t\tconst offsetMod64 = offset & 63;\n\n\t\t\tif ( offsetMod64 !== 4 ) {\n\n\t\t\t\tconst padLength = 64 - offsetMod64;\n\t\t\t\tconst padding = new Uint8Array( padLength );\n\n\t\t\t\tfiles[ filename ] = [ file, { extra: { 12345: padding } } ];\n\n\t\t\t}\n\n\t\t\toffset = file.length;\n\n\t\t}\n\n\t\treturn fflate.zipSync( files, { level: 0 } );\n\n\t}\n\n}\n\nfunction imageToCanvas( image, color ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\tconst scale = 1024 / Math.max( image.width, image.height );\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * Math.min( 1, scale );\n\t\tcanvas.height = image.height * Math.min( 1, scale );\n\n\t\tconst context = canvas.getContext( '2d' );\n\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\tif ( color !== undefined ) {\n\n\t\t\tconst hex = parseInt( color, 16 );\n\n\t\t\tconst r = ( hex >> 16 & 255 ) / 255;\n\t\t\tconst g = ( hex >> 8 & 255 ) / 255;\n\t\t\tconst b = ( hex & 255 ) / 255;\n\n\t\t\tconst imagedata = context.getImageData( 0, 0, canvas.width, canvas.height );\n\t\t\tconst data = imagedata.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i += 4 ) {\n\n\t\t\t\tdata[ i + 0 ] = data[ i + 0 ] * r;\n\t\t\t\tdata[ i + 1 ] = data[ i + 1 ] * g;\n\t\t\t\tdata[ i + 2 ] = data[ i + 2 ] * b;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imagedata, 0, 0 );\n\n\t\t}\n\n\t\treturn canvas;\n\n\t}\n\n}\n\n//\n\nconst PRECISION = 7;\n\nfunction buildHeader() {\n\n\treturn `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n\n`;\n\n}\n\nfunction buildUSDFileAsString( dataToInsert ) {\n\n\tlet output = buildHeader();\n\toutput += dataToInsert;\n\treturn fflate.strToU8( output );\n\n}\n\n// Xform\n\nfunction buildXform( object, geometry, material ) {\n\n\tconst name = 'Object_' + object.id;\n\tconst transform = buildMatrix( object.matrixWorld );\n\n\tif ( object.matrixWorld.determinant() < 0 ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: USDZ does not support negative scales', object );\n\n\t}\n\n\treturn `def Xform \"${ name }\" (\n    prepend references = @./geometries/Geometry_${ geometry.id }.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${ transform }\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n    rel material:binding = </Materials/Material_${ material.id }>\n}\n\n`;\n\n}\n\nfunction buildMatrix( matrix ) {\n\n\tconst array = matrix.elements;\n\n\treturn `( ${ buildMatrixRow( array, 0 ) }, ${ buildMatrixRow( array, 4 ) }, ${ buildMatrixRow( array, 8 ) }, ${ buildMatrixRow( array, 12 ) } )`;\n\n}\n\nfunction buildMatrixRow( array, offset ) {\n\n\treturn `(${ array[ offset + 0 ] }, ${ array[ offset + 1 ] }, ${ array[ offset + 2 ] }, ${ array[ offset + 3 ] })`;\n\n}\n\n// Mesh\n\nfunction buildMeshObject( geometry ) {\n\n\tconst mesh = buildMesh( geometry );\n\treturn `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n\n}\n\nfunction buildMesh( geometry ) {\n\n\tconst name = 'Geometry';\n\tconst attributes = geometry.attributes;\n\tconst count = attributes.position.count;\n\n\treturn `\n    def Mesh \"${ name }\"\n    {\n        int[] faceVertexCounts = [${ buildMeshVertexCount( geometry ) }]\n        int[] faceVertexIndices = [${ buildMeshVertexIndices( geometry ) }]\n        normal3f[] normals = [${ buildVector3Array( attributes.normal, count )}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${ buildVector3Array( attributes.position, count )}]\n        float2[] primvars:st = [${ buildVector2Array( attributes.uv, count )}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n\n}\n\nfunction buildMeshVertexCount( geometry ) {\n\n\tconst count = geometry.index !== null ? geometry.index.count : geometry.attributes.position.count;\n\n\treturn Array( count / 3 ).fill( 3 ).join( ', ' );\n\n}\n\nfunction buildMeshVertexIndices( geometry ) {\n\n\tconst index = geometry.index;\n\tconst array = [];\n\n\tif ( index !== null ) {\n\n\t\tfor ( let i = 0; i < index.count; i ++ ) {\n\n\t\t\tarray.push( index.getX( i ) );\n\n\t\t}\n\n\t} else {\n\n\t\tconst length = geometry.attributes.position.count;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tarray.push( i );\n\n\t\t}\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector3Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: Normals missing.' );\n\t\treturn Array( count ).fill( '(0, 0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\n\tfor ( let i = 0; i < attribute.count; i ++ ) {\n\n\t\tconst x = attribute.getX( i );\n\t\tconst y = attribute.getY( i );\n\t\tconst z = attribute.getZ( i );\n\n\t\tarray.push( `(${ x.toPrecision( PRECISION ) }, ${ y.toPrecision( PRECISION ) }, ${ z.toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector2Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: UVs missing.' );\n\t\treturn Array( count ).fill( '(0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\n\tfor ( let i = 0; i < attribute.count; i ++ ) {\n\n\t\tconst x = attribute.getX( i );\n\t\tconst y = attribute.getY( i );\n\n\t\tarray.push( `(${ x.toPrecision( PRECISION ) }, ${ 1 - y.toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\n// Materials\n\nfunction buildMaterials( materials, textures ) {\n\n\tconst array = [];\n\n\tfor ( const uuid in materials ) {\n\n\t\tconst material = materials[ uuid ];\n\n\t\tarray.push( buildMaterial( material, textures ) );\n\n\t}\n\n\treturn `def \"Materials\"\n{\n${ array.join( '' ) }\n}\n\n`;\n\n}\n\nfunction buildMaterial( material, textures ) {\n\n\t// https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n\tconst pad = '            ';\n\tconst inputs = [];\n\tconst samplers = [];\n\n\tfunction buildTexture( texture, mapType, color ) {\n\n\t\tconst id = texture.id + ( color ? '_' + color.getHexString() : '' );\n\t\tconst isRGBA = texture.format === 1023;\n\n\t\ttextures[ id ] = texture;\n\n\t\treturn `\n        def Shader \"Transform2d_${ mapType }\" (\n            sdrMetadata = {\n                string role = \"math\"\n            }\n        )\n        {\n            uniform token info:id = \"UsdTransform2d\"\n            float2 inputs:in.connect = </Materials/Material_${ material.id }/uvReader_st.outputs:result>\n            float2 inputs:scale = ${ buildVector2( texture.repeat ) }\n            float2 inputs:translation = ${ buildVector2( texture.offset ) }\n            float2 outputs:result\n        }\n\n        def Shader \"Texture_${ texture.id }_${ mapType }\"\n        {\n            uniform token info:id = \"UsdUVTexture\"\n            asset inputs:file = @textures/Texture_${ id }.${ isRGBA ? 'png' : 'jpg' }@\n            float2 inputs:st.connect = </Materials/Material_${ material.id }/Transform2d_${ mapType }.outputs:result>\n            token inputs:wrapS = \"repeat\"\n            token inputs:wrapT = \"repeat\"\n            float outputs:r\n            float outputs:g\n            float outputs:b\n            float3 outputs:rgb\n            ${ material.transparent || material.alphaTest > 0.0 ? 'float outputs:a' : '' }\n        }`;\n\n\t}\n\n\n\tif ( material.side === THREE.DoubleSide ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: USDZ does not support double sided materials', material );\n\n\t}\n\n\tif ( material.map !== null ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:diffuseColor.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:rgb>` );\n\n\t\tif ( material.transparent ) {\n\n\t\t\tinputs.push( `${ pad }float inputs:opacity.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:a>` );\n\n\t\t} else if ( material.alphaTest > 0.0 ) {\n\n\t\t\tinputs.push( `${ pad }float inputs:opacity.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:a>` );\n\t\t\tinputs.push( `${ pad }float inputs:opacityThreshold = ${material.alphaTest}` );\n\n\t\t}\n\n\t\tsamplers.push( buildTexture( material.map, 'diffuse', material.color ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }color3f inputs:diffuseColor = ${ buildColor( material.color ) }` );\n\n\t}\n\n\tif ( material.emissiveMap !== null ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:emissiveColor.connect = </Materials/Material_${ material.id }/Texture_${ material.emissiveMap.id }_emissive.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.emissiveMap, 'emissive' ) );\n\n\t} else if ( material.emissive.getHex() > 0 ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:emissiveColor = ${ buildColor( material.emissive ) }` );\n\n\t}\n\n\tif ( material.normalMap !== null ) {\n\n\t\tinputs.push( `${ pad }normal3f inputs:normal.connect = </Materials/Material_${ material.id }/Texture_${ material.normalMap.id }_normal.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.normalMap, 'normal' ) );\n\n\t}\n\n\tif ( material.aoMap !== null ) {\n\n\t\tinputs.push( `${ pad }float inputs:occlusion.connect = </Materials/Material_${ material.id }/Texture_${ material.aoMap.id }_occlusion.outputs:r>` );\n\n\t\tsamplers.push( buildTexture( material.aoMap, 'occlusion' ) );\n\n\t}\n\n\tif ( material.roughnessMap !== null && material.roughness === 1 ) {\n\n\t\tinputs.push( `${ pad }float inputs:roughness.connect = </Materials/Material_${ material.id }/Texture_${ material.roughnessMap.id }_roughness.outputs:g>` );\n\n\t\tsamplers.push( buildTexture( material.roughnessMap, 'roughness' ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }float inputs:roughness = ${ material.roughness }` );\n\n\t}\n\n\tif ( material.metalnessMap !== null && material.metalness === 1 ) {\n\n\t\tinputs.push( `${ pad }float inputs:metallic.connect = </Materials/Material_${ material.id }/Texture_${ material.metalnessMap.id }_metallic.outputs:b>` );\n\n\t\tsamplers.push( buildTexture( material.metalnessMap, 'metallic' ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }float inputs:metallic = ${ material.metalness }` );\n\n\t}\n\n\tif ( material.alphaMap !== null ) {\n\n\t\tinputs.push( `${pad}float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.alphaMap.id}_opacity.outputs:r>` );\n\t\tinputs.push( `${pad}float inputs:opacityThreshold = 0.0001` );\n\n\t\tsamplers.push( buildTexture( material.alphaMap, 'opacity' ) );\n\n\t} else {\n\n\t\tinputs.push( `${pad}float inputs:opacity = ${material.opacity}` );\n\n\t}\n\n\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\tinputs.push( `${ pad }float inputs:clearcoat = ${ material.clearcoat }` );\n\t\tinputs.push( `${ pad }float inputs:clearcoatRoughness = ${ material.clearcoatRoughness }` );\n\t\tinputs.push( `${ pad }float inputs:ior = ${ material.ior }` );\n\n\t}\n\n\treturn `\n    def Material \"Material_${ material.id }\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${ inputs.join( '\\n' ) }\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n\n        token outputs:surface.connect = </Materials/Material_${ material.id }/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${ material.id }.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n\n${ samplers.join( '\\n' ) }\n\n    }\n`;\n\n}\n\nfunction buildColor( color ) {\n\n\treturn `(${ color.r }, ${ color.g }, ${ color.b })`;\n\n}\n\nfunction buildVector2( vector ) {\n\n\treturn `(${ vector.x }, ${ vector.y })`;\n\n}\n\nexport { USDZExporter };\n"],
  "mappings": "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",
  "names": []
}
